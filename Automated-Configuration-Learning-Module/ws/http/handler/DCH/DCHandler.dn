// DCHandler.dn
//
// Dynamic Content Handler;
//
// Author: Roberto Rodrigues Filho
// May @ 2017

const char debugMSG[] = "[@DCHandler]"

component provides http.handler.DCH.DCHandler requires io.Output out, data.IntUtil iu, io.File,
	io.FileSystem fileSystem, http.util.HTTPUtil httpUtil, data.adt.HashTable, 
	data.StringUtil strUtil, web_app.Dispatcher dispatcher, encoding.Encoder:uri encoder {

	// should the thread blocker be here -- or is it a too coarse grained thread controller?
	Mutex threadBlocker = new Mutex()

	void DCHandler:process(HTTPMessage httpHeader) {
		//mutex (threadBlocker) {
			HTTPMessage httpMessage = httpUtil.getMessage(httpHeader)
			//HashTable test = parseHTTPData(httpMessage)
			dispatcher.process(extractBaseDir(httpMessage.resource), httpMessage.command,
				parseHTTPData(httpMessage), httpMessage.socket)
			// TODO: need to rewrite this to send a resource not found message (just like in the core.dn 241)
			// this code however should be inside dispatcher.
			// TODO: need to make this more elaborated as well
			// maybe return enable a PHP/JSP like processing
			// or page redirecting, and other features available in other web development tools
			//char result[] = dispatcher.process(extractBaseDir(httpMessage.resource), httpMessage.command,
				//parseHTTPData(httpMessage), httpMessage.socket)	
			/*if (result == null || result == "") {
				httpMessage.socket.send("HTTP/1.1 500 Internal Server Error\r\n")
				httpMessage.socket.send("Server: $(HTTPUtil.SERVER_NAME)\r\n")
				httpMessage.socket.send("Connection: close\r\n")
				httpMessage.socket.send("\r\n")
			} else {
				httpMessage.socket.send("HTTP/1.1 200 OK\r\n")
				httpMessage.socket.send("Server: $(HTTPUtil.SERVER_NAME)\r\n")
				httpMessage.socket.send("Content-Encoding: binary\r\n")
				httpMessage.socket.send("Content-Length: $(iu.intToString(result.arrayLength))\r\n")
				httpMessage.socket.send("Connection: close\r\n")
				httpMessage.socket.send("Content-Type: text/html\r\n")
				httpMessage.socket.send("\r\n")
				httpMessage.socket.send(result)
			}*/
		//}
	}

	HashTable parseHTTPData(HTTPMessage httpMessage) {
		HashTable hashedHTTPData = null
		if ((httpMessage.postData != "") 
			|| (httpMessage.postData != null)) {
			hashedHTTPData = parseString2Hash(httpMessage.postData, hashedHTTPData)
		}
		if ((httpMessage.queryString != "") 
			|| (httpMessage.queryString != null)) {
			hashedHTTPData = parseString2Hash(httpMessage.queryString, hashedHTTPData)
		}
		return hashedHTTPData
	}

	//TODO: validate string
	HashTable parseString2Hash(char str[], HashTable hashedHTTPData) {
		if (hashedHTTPData == null) { hashedHTTPData = new HashTable() }
		String helper[] = strUtil.explode(str, "&")
		String keyValue[]
		for (int count = 0; count < helper.arrayLength; count++) {
			keyValue = strUtil.explode(helper[count].string, "=")
			hashedHTTPData.put(keyValue[0].string, 
				new String(encoder.decode(keyValue[1].string)))
		}
		return hashedHTTPData
	}

	//TODO: implement a fully functional httpDecoder
	// currently it just replaces "+"" to " "
	char[] httpDecode(char str[]) {
		char decodedStr[] = new char[str.arrayLength]
		for (int count = 0; count < str.arrayLength; count++) {
			if (str[count] == "+") { decodedStr[count] = " " }
			else { decodedStr[count] = str[count] }
		}
		return encoder.decode(decodedStr)
	}

	char[] extractBaseDir(char str[]) {
		return strUtil.subString(str, HTTPUtil.htdocs.arrayLength+1,
		 str.arrayLength-(HTTPUtil.htdocs.arrayLength+1))
	}
}
