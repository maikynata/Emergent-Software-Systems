data Row {
    dec values[]
}
component provides App requires io.File, data.json.JSONEncoder parser, data.IntUtil iu, UCB ucb, io.Output out {
  int App:main(AppParam params[])
  {
    File fd = new File("test_data.txt", File.FILE_ACCESS_READ)
    Row rows[] = parser.jsonToArray(fd.read(fd.getSize()), typeof(Row[]), null)
    String actions[] = sys.getAllConfigs()

    //for (int i = 0; i < rows[0].values.arrayLength; i++)
    //    actions = new String[](actions, new String("a" + i))

      ucb.setActions(actions)
      //ucb.setActions(sys.getAllConfigs())

      int actionsTaken[] = new int[actions.arrayLength]

      for (int i = 0; i < rows.arrayLength; i++)
      {

        int a = ucb.getAction()
        sys.setConfig(actions[a].string)
        //normalização
        //dec d = rows[i].values[a] / 12
        dec d = (rows[i].values[a] - 5) / 7

        sys.getPerceptionData // tratar o json

        ucb.consumeData(d) // seta o reweard

        actionsTaken[a] +=  1

      }

    out.println("action Low: $(iu.intToString(actionsTaken[0]))")
    out.println("action Medium: $(iu.intToString(actionsTaken[1]))")
    out.println("action High: $(iu.intToString(actionsTaken[2]))")

      return 0
  }
}
