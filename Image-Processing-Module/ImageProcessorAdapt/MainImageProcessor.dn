uses main_component.MainComponent

uses time.DateTime

data FileStructure {
  DateTime date
  char resource[]
}


component provides App requires  Loader loader, composition.Adapter adapter, time.Timer t,
        io.Output out, time.Calendar cal, data.IntUtil iu, time.DateUtil dt,
        io.TextFile, data.json.JSONEncoder jsonEncoder {

int App:main(AppParam param[])  {

  IDC mainComponent = loader.load("main_component/MainComponent.o")
  IDC variantA = loader.load("intf/VariantA.o")
  IDC variantB = loader.load("intf/VariantB.o")
  IDC variantC = loader.load("intf/VariantC.o")

  dana.rewire(mainComponent :> "intf.Interface",
    variantA :< "intf.Interface")

  MainComponent obj = new MainComponent() from mainComponent
    obj.method()

  adapter.adaptRequiredInterface(mainComponent,
    "intf.Interface", variantB)
      obj.method()

  adapter.adaptRequiredInterface(mainComponent,
    "intf.Interface", variantC)
       obj.method()




      //read log
      char filePath[] = "log.txt"
      TextFile file = new TextFile(filePath, File.FILE_ACCESS_READ)


  char line[]

  FileStructure objects[] = new FileStructure[500]
  int c = 0
  while ((line = file.readLine()) != null) {
    FileStructure fLine = jsonEncoder.jsonToData(line, typeof(FileStructure), null)
    objects[c] = fLine

    //out.println("$(iu.intToString(objects[i].region)) - $(iu.intToString(objects[i].plataform)) - $(iu.intToString(objects[i].bandwitch)) - $(iu.intToString(objects[i].quality)) -$(iu.intToString(objects[i].date.hour)):$(iu.intToString(objects[i].date.minute)):$(iu.intToString(objects[i].date.second)):$(iu.intToString(objects[i].date.millisecond)) - $(objects[i].resource)")
    c++
}


for (int i = 0; i < objects.arrayLength; i++) {
  /* code */
out.println("Request $(iu.intToString(i))")

  init = cal.getTime()
      HTTPResponse responseLow =  http.get("localhost:2012/danapedia/action.dn?img=$(objects[i].resource)", null)
  end = cal.getTime()

  lowRT = dt.toMilliseconds(dt.diff(end, init))

  out.println("response time Low: $(iu.intToString(lowRT))")

t.sleep(400)

  }
  return 0
}
}

//InteractiveAssembly

/*if (params.arrayLength < 1) {
  out.println("$(debugMSG) use: dana InteractiveAssembly app.main.Component.o")
  return 1
}
perception = new Perception(true)
perception.setMain(params[0].string, null)
char cmd[] = "start"
while (cmd != "exit") {
  if (cmd != "start") { commandInterpret(cmd)	}
  out.print("perception> ")
  cmd = in.readln()
}

*/
