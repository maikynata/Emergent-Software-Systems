
component provides intf.ImgProcessor requires io.Output out, os.Run run {

	void ImgProcessor:process2(char fileNameIMG[]) {

		out.println("Image Name $(fileNameIMG)")

		//	out.println("Image Name $(iu.intToString(fileNameIMG)")

		//	out.println("VariantLinux")

		/* char osCommand[] = new char[]("ip a")
		RunStatus rS = run.execute(osCommand) */

		//Image High
		char osCommand1[] = new char[]("cd /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD && cp $(fileNameIMG) /home/saglsys/Emergent-Software-System/Automated-Configuration-Learning-Module/repository/htdocs/high")
		RunStatus rS1 = run.execute(osCommand1)

		//Image Medium
		char osCommand2[] = new char[]("cd /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD && cp $(fileNameIMG) /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD_out && cd /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD_out && advpng -z -1 $(fileNameIMG) && mv $(fileNameIMG) /home/saglsys/Emergent-Software-System/Automated-Configuration-Learning-Module/repository/htdocs/medium")
		RunStatus rS2 = run.execute(osCommand2)

		//Image Low
		char osCommand3[] = new char[]("cd /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD && cp $(fileNameIMG) /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD_out && cd /home/saglsys/Emergent-Software-System/Image-Processing-Module/ImageBD_out &&	advpng -z  -i 2 -1 $(fileNameIMG) && mv $(fileNameIMG) /home/saglsys/Emergent-Software-System/Automated-Configuration-Learning-Module/repository/htdocs/low")
		RunStatus rS3 = run.execute(osCommand3)

	}
}
