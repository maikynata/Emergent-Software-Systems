uses time.DateTime


data FileStructure {
  int region
  int plataform
  int bandwitch
  int quality
  DateTime date
  char resource[]
}

const char IP[] = "localhost"
const int PORT 	= 2011

component provides App requires rest.RESys, time.Timer t, time.DateUtil du, io.Output out, io.TextFile, net.http.HTTPRequest http, data.json.JSONEncoder jsonEncoder, data.IntUtil iu {

  int App:main(AppParam param[]) {
    RESys sys = new RESys(IP, PORT)
    char filePath[] = "../Client/log.txt"

    TextFile file = new TextFile(filePath, File.FILE_ACCESS_READ)

    char line[]

    FileStructure objects[] = new FileStructure[500]
    int i = 0
    while ((line = file.readLine()) != null) {
      FileStructure fLine = jsonEncoder.jsonToData(line, typeof(FileStructure), null)
      objects[i] = fLine

      //out.println("$(iu.intToString(objects[i].region)) - $(iu.intToString(objects[i].plataform)) - $(iu.intToString(objects[i].bandwitch)) - $(iu.intToString(objects[i].quality)) -$(iu.intToString(objects[i].date.hour)):$(iu.intToString(objects[i].date.minute)):$(iu.intToString(objects[i].date.second)):$(iu.intToString(objects[i].date.millisecond)) - $(objects[i].resource)")
      i++
}


    out.println("Setting main...")
    sys.setMain("../repository/TCPNetwork.o")
    out.println("Adding proxy...")
    sys.addProxy("|../pal/monitoring/proxies/HTTPProxy.o|*(*:http.handler.GET.HTTPGET[0]:*)|")
    out.println("Starting collection cycle...")

    //for (todos os objects){

    String configs[] = sys.getAllConfigs()
    for (int count = 0; count < configs.arrayLength; count++) {
      sys.setConfig(configs[count].string)
      t.sleep(100)
      out.println("Perception data ($(iu.intToString(count))): $(sys.getPerceptionData())")
    }





  //}
    out.println("Terminating...")
    sys.terminate()
    out.println("Goodbye!")
    return 0
  }

}
