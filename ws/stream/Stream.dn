uses net.TCPSocket

data IntH {
	int i
}

component provides stream.Stream requires data.IntUtil intUtil, io.Output out, data.StringUtil strUtil {

	bool autoChunked
	bool firstWrite
	bool streamEnded
	TCPSocket socket

	Stream:Stream(TCPSocket s) {
		autoChunked = false
		firstWrite = true
		streamEnded = false
		socket = s
	}

	char[] intToHex(int i) {
		IntH id = new IntH(i)
		byte bytes[] = dana.getByteArrayOf(id)
		char res[] = null
		for (int p = bytes.arrayLength - 1; p != INT_MAX; p--) {
			byte x = bytes[p] & 0xF
			res = new char[]("0123456789ABCDEF"[x], res)
			x = bytes[p] & 0xF0
			x = x >> 4
			res = new char[]("0123456789ABCDEF"[x], res)
		}
		return res
	}

	char[] deleteZeros(char q[]) {
		int i = 0
		while (q[i] == "0") { i++ }
		if (q[i] == ";") { return strUtil.subString(q, i-1, (q.arrayLength-i)+1) }
		return strUtil.subString(q, i, q.arrayLength-i)
	}

	void writeChunkHeader(char dt[]) {
		char q[] = intToHex(dt.arrayLength)
		q = deleteZeros(q)
		socket.send(new char[](q, ";\r\n"))
	}

	void writeStatus(int code, char reason[], char key[], char value[]) {
		if (streamEnded) {
			throw new Exception("Stream end has been set; no further data can be written")
		}
		if (firstWrite) {
			char hdrLine[] = new char[]("HTTP/1.1 ", intUtil.intToString(code), " ", reason, "\r\n")
			socket.send(hdrLine)
			socket.send(new char[](key, ":", value, "\r\n"))
			socket.send("\r\n")
		} else { throw new Exception("Request status can only be written once")	}
		firstWrite = false
	}

	void Stream:write(char dt[]) {
		if (streamEnded){
			throw new Exception("Stream end has been set; no further data can be written")
		}
		if (firstWrite) {
			writeStatus(200, "OK", "transfer-encoding", "chunked")
			firstWrite = false
			autoChunked = true
		}
		if (autoChunked) { writeChunkHeader(dt) }
		socket.send(new char[](dt, "\r\n"))
	}

	void Stream:endStream() {
		if (!streamEnded) {
			if (!firstWrite) {
				if (autoChunked) { socket.send("0;\r\n\r\n") }
			} else {
				writeStatus(200, "OK", "content-length", "0")
			}
			streamEnded = true
		}
	}

}
